// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TBMMO_Backend;

#nullable disable

namespace TBMMO_Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220920042545_updatedfood")]
    partial class updatedfood
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TBMMO_Backend.Models.Bag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("Slots")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("Bag");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BagId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BagId");

                    b.ToTable("Items");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.Clothing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PlayerCharacterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerCharacterName")
                        .IsUnique();

                    b.ToTable("Clothing");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PlayerCharacterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerCharacterName")
                        .IsUnique();

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.PlayerCharacter", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("PlayerCharacters");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.PlayerProfession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionSheetId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("ProfessionSheetId");

                    b.ToTable("PlayerProfession");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.PlayerRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelationshipSheetId")
                        .HasColumnType("int");

                    b.Property<int>("RelationshipType")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RelationshipSheetId");

                    b.ToTable("PlayerRelationship");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.PlayerSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("SkillSheetId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("SkillSheetId");

                    b.ToTable("PlayerSkill");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.ProfessionSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PlayerCharacterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerCharacterName")
                        .IsUnique();

                    b.ToTable("ProfessionSheets");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.RelationshipSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PlayerCharacterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerCharacterName")
                        .IsUnique();

                    b.ToTable("RelationshipSheets");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.SkillSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PlayerCharacterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerCharacterName")
                        .IsUnique();

                    b.ToTable("SkillSheets");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.StatSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HP")
                        .HasColumnType("int");

                    b.Property<string>("PlayerCharacterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerCharacterName")
                        .IsUnique();

                    b.ToTable("StatSheets");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Profession");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.Items.Armor", b =>
                {
                    b.HasBaseType("TBMMO_Backend.Models.Items.Item");

                    b.Property<int?>("ClothingId")
                        .HasColumnType("int");

                    b.Property<string>("EquipText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ClothingId");

                    b.HasDiscriminator().HasValue("Armor");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.Items.Food", b =>
                {
                    b.HasBaseType("TBMMO_Backend.Models.Items.Item");

                    b.Property<string>("CookText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Food");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.Bag", b =>
                {
                    b.HasOne("TBMMO_Backend.Models.PlayerCharacter.Inventory", "Inventory")
                        .WithMany("Bags")
                        .HasForeignKey("InventoryId");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.Items.Item", b =>
                {
                    b.HasOne("TBMMO_Backend.Models.Bag", "Bag")
                        .WithMany("Items")
                        .HasForeignKey("BagId");

                    b.Navigation("Bag");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.Clothing", b =>
                {
                    b.HasOne("TBMMO_Backend.Models.PlayerCharacter.PlayerCharacter", null)
                        .WithOne("Clothing")
                        .HasForeignKey("TBMMO_Backend.Models.PlayerCharacter.Clothing", "PlayerCharacterName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.Inventory", b =>
                {
                    b.HasOne("TBMMO_Backend.Models.PlayerCharacter.PlayerCharacter", "PlayerCharacter")
                        .WithOne("Inventory")
                        .HasForeignKey("TBMMO_Backend.Models.PlayerCharacter.Inventory", "PlayerCharacterName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerCharacter");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.PlayerProfession", b =>
                {
                    b.HasOne("TBMMO_Backend.Models.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TBMMO_Backend.Models.PlayerCharacter.ProfessionSheet", "ProfessionSheet")
                        .WithMany("Professions")
                        .HasForeignKey("ProfessionSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profession");

                    b.Navigation("ProfessionSheet");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.PlayerRelationship", b =>
                {
                    b.HasOne("TBMMO_Backend.Models.PlayerCharacter.RelationshipSheet", "RelationshipSheet")
                        .WithMany("Relationships")
                        .HasForeignKey("RelationshipSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelationshipSheet");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.PlayerSkill", b =>
                {
                    b.HasOne("TBMMO_Backend.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TBMMO_Backend.Models.PlayerCharacter.SkillSheet", "SkillSheet")
                        .WithMany("Skills")
                        .HasForeignKey("SkillSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("SkillSheet");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.ProfessionSheet", b =>
                {
                    b.HasOne("TBMMO_Backend.Models.PlayerCharacter.PlayerCharacter", "PlayerCharacter")
                        .WithOne("Professions")
                        .HasForeignKey("TBMMO_Backend.Models.PlayerCharacter.ProfessionSheet", "PlayerCharacterName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerCharacter");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.RelationshipSheet", b =>
                {
                    b.HasOne("TBMMO_Backend.Models.PlayerCharacter.PlayerCharacter", "PlayerCharacter")
                        .WithOne("Relationships")
                        .HasForeignKey("TBMMO_Backend.Models.PlayerCharacter.RelationshipSheet", "PlayerCharacterName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerCharacter");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.SkillSheet", b =>
                {
                    b.HasOne("TBMMO_Backend.Models.PlayerCharacter.PlayerCharacter", "PlayerCharacter")
                        .WithOne("Skills")
                        .HasForeignKey("TBMMO_Backend.Models.PlayerCharacter.SkillSheet", "PlayerCharacterName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerCharacter");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.StatSheet", b =>
                {
                    b.HasOne("TBMMO_Backend.Models.PlayerCharacter.PlayerCharacter", "PlayerCharacter")
                        .WithOne("Stats")
                        .HasForeignKey("TBMMO_Backend.Models.PlayerCharacter.StatSheet", "PlayerCharacterName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerCharacter");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.Items.Armor", b =>
                {
                    b.HasOne("TBMMO_Backend.Models.PlayerCharacter.Clothing", "Clothing")
                        .WithMany("EquippedItems")
                        .HasForeignKey("ClothingId");

                    b.Navigation("Clothing");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.Bag", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.Clothing", b =>
                {
                    b.Navigation("EquippedItems");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.Inventory", b =>
                {
                    b.Navigation("Bags");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.PlayerCharacter", b =>
                {
                    b.Navigation("Clothing")
                        .IsRequired();

                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("Professions")
                        .IsRequired();

                    b.Navigation("Relationships")
                        .IsRequired();

                    b.Navigation("Skills")
                        .IsRequired();

                    b.Navigation("Stats")
                        .IsRequired();
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.ProfessionSheet", b =>
                {
                    b.Navigation("Professions");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.RelationshipSheet", b =>
                {
                    b.Navigation("Relationships");
                });

            modelBuilder.Entity("TBMMO_Backend.Models.PlayerCharacter.SkillSheet", b =>
                {
                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
